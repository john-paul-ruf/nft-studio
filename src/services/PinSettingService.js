import defaultLogger from '../main/utils/logger.js';

/**
 * PinSettingService - Manages Pin Setting Feature
 * 
 * Responsibilities:
 * - Manage pin state (pinned/unpinned)
 * - Store and validate settings file paths
 * - Emit pin-related events via EventBus
 * - Handle settings file lifecycle
 * 
 * Part of the Pin Setting feature that enables "audit mode" - allowing users
 * to lock current settings and preview/audit a render loop before committing
 * to a full render.
 */
export class PinSettingService {
    constructor(eventBus = null, logger = null) {
        // Dependency injection following Dependency Inversion Principle
        this.eventBus = eventBus;
        this.logger = logger || defaultLogger;
        
        // Pin state management
        this.isPinnedState = false;
        this.pinnedSettingsFilePath = null; // Path to the settings file (generated by my-nft-gen)
        this.pinnedTimestamp = null;
        
        this.logger.info('PinSettingService initialized');
    }

    /**
     * Check if settings are currently pinned
     * @returns {boolean} True if settings are pinned
     */
    isPinned() {
        return this.isPinnedState;
    }

    /**
     * Get the path to the pinned settings file
     * @returns {string|null} Settings file path or null if not pinned
     */
    getSettingsFilePath() {
        return this.pinnedSettingsFilePath;
    }

    /**
     * Get the pinned settings data (DEPRECATED - settings are stored in file, not memory)
     * @deprecated Use getSettingsFilePath() instead
     * @returns {null} Always returns null - settings are stored in file
     */
    getPinnedSettings() {
        this.logger.warn('getPinnedSettings() is deprecated - use getSettingsFilePath() instead');
        return null;
    }

    /**
     * Get pin metadata
     * @returns {Object} Pin state metadata
     */
    getPinMetadata() {
        return {
            isPinned: this.isPinnedState,
            settingsFilePath: this.pinnedSettingsFilePath,
            pinnedTimestamp: this.pinnedTimestamp,
            pinnedDuration: this.pinnedTimestamp ? Date.now() - this.pinnedTimestamp : null
        };
    }

    /**
     * Pin settings with a specific settings file
     * @param {string} settingsFilePath - Path to the settings file to pin (generated by my-nft-gen)
     * @returns {Promise<Object>} Result of pin operation
     */
    async pinSettings(settingsFilePath) {
        this.logger.info('Pinning settings', { settingsFilePath });

        try {
            // Validate settings file exists
            const validationResult = await this.validateSettingsFile(settingsFilePath);
            if (!validationResult.valid) {
                throw new Error(`Invalid settings file: ${validationResult.error}`);
            }

            // Update pin state
            this.isPinnedState = true;
            this.pinnedSettingsFilePath = settingsFilePath;
            this.pinnedTimestamp = Date.now();

            // Emit pin state change event
            this.emitPinStateChange(true, settingsFilePath);

            // Emit settings captured event
            this.emitEvent('pin:settings:captured', {
                settingsFilePath,
                timestamp: this.pinnedTimestamp
            });

            this.logger.success('Settings pinned successfully', { settingsFilePath });

            return {
                success: true,
                isPinned: true,
                settingsFilePath,
                timestamp: this.pinnedTimestamp
            };

        } catch (error) {
            this.logger.error('Failed to pin settings', error);
            
            // Emit error event
            this.emitEvent('pin:error', {
                operation: 'pin',
                error: error.message,
                settingsFilePath
            });

            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Unpin settings and clean up
     * @returns {Promise<Object>} Result of unpin operation
     */
    async unpinSettings() {
        this.logger.info('Unpinning settings');

        try {
            const previousSettingsFile = this.pinnedSettingsFilePath;

            // Clear pin state
            this.isPinnedState = false;
            this.pinnedSettingsFilePath = null;
            this.pinnedTimestamp = null;

            // Emit pin state change event
            this.emitPinStateChange(false, null);

            this.logger.success('Settings unpinned successfully');

            return {
                success: true,
                isPinned: false,
                previousSettingsFile
            };

        } catch (error) {
            this.logger.error('Failed to unpin settings', error);
            
            // Emit error event
            this.emitEvent('pin:error', {
                operation: 'unpin',
                error: error.message
            });

            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Toggle pin state
     * If unpinned, requires settingsFilePath to pin
     * If pinned, will unpin
     * @param {string} settingsFilePath - Settings file path (required when pinning)
     * @returns {Promise<Object>} Result of toggle operation
     */
    async togglePin(settingsFilePath = null) {
        if (this.isPinnedState) {
            return await this.unpinSettings();
        } else {
            if (!settingsFilePath) {
                throw new Error('Settings file path required to pin settings');
            }
            return await this.pinSettings(settingsFilePath);
        }
    }

    /**
     * Capture current settings from project and pin them
     * This is a convenience method that combines settings capture and pinning
     * @param {Object} renderCoordinator - RenderCoordinator instance
     * @param {Object} project - Project instance
     * @returns {Promise<Object>} Result of capture and pin operation
     */
    async captureAndPinCurrentSettings(renderCoordinator, project) {
        this.logger.info('Capturing and pinning current settings');

        try {
            // Capture settings using RenderCoordinator
            const captureResult = await renderCoordinator.captureSettingsForPin(project);
            
            if (!captureResult.success) {
                throw new Error(`Failed to capture settings: ${captureResult.error}`);
            }

            // Pin the captured settings
            return await this.pinSettings(captureResult.settingsFilePath);

        } catch (error) {
            this.logger.error('Failed to capture and pin settings', error);
            
            // Emit error event
            this.emitEvent('pin:error', {
                operation: 'captureAndPin',
                error: error.message
            });

            return {
                success: false,
                error: error.message
            };
        }
    }

    /**
     * Validate settings file path (basic validation only)
     * Note: This is a frontend service, so we can't access the file system directly.
     * File existence and readability will be validated by the backend when used.
     * @param {string} settingsFilePath - Path to settings file
     * @returns {Promise<Object>} Validation result
     */
    async validateSettingsFile(settingsFilePath) {
        try {
            // Basic validation: check if path is provided and looks like a JSON file
            if (!settingsFilePath || typeof settingsFilePath !== 'string') {
                return {
                    valid: false,
                    error: 'Settings file path is required'
                };
            }

            // Check if file has .json extension
            if (!settingsFilePath.toLowerCase().endsWith('.json')) {
                return {
                    valid: false,
                    error: 'Settings file must be a JSON file'
                };
            }

            // Emit validation success event
            this.emitEvent('pin:settings:validated', {
                settingsFilePath,
                valid: true
            });

            return {
                valid: true,
                settingsFilePath
            };

        } catch (error) {
            this.logger.error('Settings file validation error', error);
            return {
                valid: false,
                error: error.message
            };
        }
    }

    /**
     * Emit pin state change event
     * @param {boolean} isPinned - Current pin state
     * @param {string|null} settingsFilePath - Settings file path
     */
    emitPinStateChange(isPinned, settingsFilePath) {
        if (!this.eventBus) {
            this.logger.warn('EventBus not available, cannot emit pin state change');
            return;
        }

        this.eventBus.emit('pin:state:changed', {
            isPinned,
            settingsFilePath,
            timestamp: Date.now()
        }, {
            source: 'PinSettingService',
            component: 'PinSettingService'
        });

        this.logger.info('Pin state change emitted', { isPinned, settingsFilePath });
    }

    /**
     * Emit generic pin event
     * @param {string} eventType - Event type
     * @param {Object} payload - Event payload
     */
    emitEvent(eventType, payload) {
        if (!this.eventBus) {
            this.logger.warn('EventBus not available, cannot emit event', { eventType });
            return;
        }

        this.eventBus.emit(eventType, payload, {
            source: 'PinSettingService',
            component: 'PinSettingService'
        });
    }

    /**
     * Clean up resources
     */
    cleanup() {
        this.logger.info('Cleaning up PinSettingService');
        
        // Clear pin state
        this.isPinnedState = false;
        this.pinnedSettingsFilePath = null;
        this.pinnedTimestamp = null;
    }

    /**
     * Get service status for debugging
     * @returns {Object} Service status
     */
    getStatus() {
        return {
            isPinned: this.isPinnedState,
            settingsFilePath: this.pinnedSettingsFilePath,
            pinnedTimestamp: this.pinnedTimestamp,
            pinnedDuration: this.pinnedTimestamp ? Date.now() - this.pinnedTimestamp : null,
            hasEventBus: !!this.eventBus,
            hasLogger: !!this.logger
        };
    }
}

// Export as singleton for convenience (can also be instantiated)
export default new PinSettingService();